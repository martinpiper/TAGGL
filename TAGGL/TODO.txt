* 3DRotLibE
	angshift=8
	but if "saonly" then it can be 1<<30
	3DLib-G

	* C:\Backups\OldMachines\OldMachineBackup\D\RPCEmu\hostfs\TAG\!Holograph\Source\TAGdefs,ffb
		angshift=12            : use these for BHP!		angchg=4		angshift=8                 : use these for cobalt seed!		angchg=1		angcount=360*angchg		angchgs=LN(angchg)/LN(2)	* C:\Backups\OldMachines\OldMachineBackup\D\RPCEmu\hostfs\TAG\!Holograph\Source\Library,ffb
		Uses: C:\Backups\OldMachines\OldMachineBackup\D\RPCEmu\hostfs\TAG\!Holograph\Source\GameLib,ffb
		Uses: C:\Backups\OldMachines\OldMachineBackup\D\RPCEmu\hostfs\TAG\!Holograph\3DLib\3DLib-G,ffb
			saonly does equal TRUE because of: only strongARM and ARM7500 - for BHP
		Uses C:\Backups\OldMachines\OldMachineBackup\D\RPCEmu\hostfs\TAG\!Holograph\3DLib\3DRotG64,ffb
			rotateobject
		Uses: C:\Backups\OldMachines\OldMachineBackup\D\RPCEmu\hostfs\TAG\!Holograph\3DLib\UsefulLib,ffb
			costable, sintable
		Hmm for the BHP TAGcode, how was it really assembled?
			http://www.riscos.com/support/developers/prm/debugger.html
			F12
			debug
			load filename...
				For &54 - TAG Misc Operation
			memoryi 8154
			memoryi 83c8
			$8414 indicates R1=1440 R2=12
		Understand why: cos((double(i) * 2.0f * kAngChg * M_PI) / double(kAngCount))
			* Note: However the cable cars on Track2 do follow their cables with this configuration
		Which differs to: C%!(T%*4)=FNint(M%*COS(RAD(T%*360/N%)))






* At the moment "gGame.InitStack();" is needed to reset the stack each frame, some handlers/operations do not seem to be popping all their stacked data
	SendEventToWorldTemplate() can warn if the stack is not being popped correctly to aid in debugging why
		It is probably linked to some exceptions being thrown due to "screen memory" access, or SWIs




* // MPi: TODO: Implement properly
	Several operations are not handled properly here



* "Data\MIME" throws ARM handler exceptions: Template $143e0 Running Event Frame:10 for 'Trex            ' handler 1='MIME            '
	00047130 : e8aa0007 stmia r10!, {r0, r1, r2}
	Assertion failed!



* "Data\BHPOutput\Control" + "Data\BHPOutput\Titles" + "Data\BHPOutput\Game" + "Data\BHPOutput\Track2" needs: CallbackTAGFunction $8124
	&24- Object Transform (rotate then add wld x/y/z)



* "Data\BHPOutput\Control" needs:
	CallbackTAGFunction $8154
		Several types
	CallbackTAGFunction $8140
	CallbackTAGFunction $8128
		&28- Exec New System / Exec New App / Merge App Data
		Template $142b0 Running Event Frame:4 for 'Control         ' handler 0='CtrlApp         '
		r0	0xffffffff
		r1	0x00014930
		Library: ea_exec_ind->
		GameLib: ea_execsystem
	Adding kTAGFunctionExecNew
		Seeing: +		name	0x00cfebe0 "BHPdata:Titles"	char[0x00000011]
	Implemented, now seeing: $8200 which indicates it is reporting an error
		kTAGFunctionReportError $00014b28 Error, No Track Files Are Installed!
		This is a really good sign, it means it's not able to find any track files
	* Need to implement: 00014a7c : ef02000c swi 2000c
		http://www.wra1th.plus.com/lua/diy/Riscos.html
		swi   0x2000c       @  XOS_GBPB
		https://www.riscosopen.org/wiki/documentation/show/OS_GBPB
		do_syscall
		Now intercepted SWIs, see: OutputDebugStringA("gLastSysCall\n");
		https://www.riscosopen.org/wiki/documentation/show/OS_GBPB%2012
		if (gLastSysCall == 0x2000c)
		Seeing: +		memory	0x00efefe4 "BHPdata:"	char[0x00000100]
		* Need to implement a proper callback for processing SWIs
		* Done OS_GBPB
	* Now need: CallbackTAGFunction 0x8124
	I see spinning cars with wheels, although the scale and position is wrong due to missing 0x8124

	* http://www.riscos.com/support/developers/prm_index/numswilist.html
		Seeing SWI 0x6 OS_Byte
		https://www.riscosopen.org/wiki/documentation/show/OS_Byte
		https://www.riscosopen.org/wiki/documentation/show/OS_Byte%20129
		https://www.riscosopen.org/wiki/documentation/show/OS_Byte%20129%20(scan%20single)






Could probably do with some fake sample headers to stop a handler exception at startup



// MPi: TODO: 04/15 = misc parameters (if added using add_world)



// MPi: TODO: I think this needs some template data words ARM memory setup



Look at merging BHP Track3 with Game. Load Game first then Track3?
Check the original applicaton, it might load control first, then check handlers.
	According to C:\Backups\OldMachines\OldMachineBackup\D\RPCEmu\hostfs\BHP\Output\!Run,feb
	Control is loaded on its own first




Systems and Worlds, they need compiled (loaded) and live data. They get reinitialised from the compiled data.
Every loaded resource need this allocated in the ARM memory:
00/03 = ptr to compiled resource data
04/07 = ptr to live resource data       
08/11 = internal use  (bounding box size if template resource)
12/15 = internal use  
16/31 = resource name (padded with spaces)
Don't worry about the vertex list updating for the MIME demo. Instead optimise for the general case which is static model verts.
The live system and world data needs to be split into functions so the live data can be quickly converted to the C++ form for each frame.
Basically if the pre-frame code handler is called then mark the world template as dirty as well as the system.
Then update data for those dirty objects from the live data.



Run the collision update and the event



Add TAG function 8118



Breakpoint on unimplemented TAG functions in CallbackTAGFunction.
Then implement.



Transparency. The problem with this is that is uses face flags. Not sprite mask data.






Move sTheARM into a new instance within ARMCore



If a handler generates an exception then warn once if debug is turned on and stop it from running in the future.
The exception will need to be passed back from ARMCore.



Check the object scale is fed through from the world template.



Also check the world template scale is copied over.



// MPi: TODO: Find the distance of the current matrix from the viewpoint and choose the object



Optimise the model draw to use compiled GL.
// MPi: TODO: Instead of verts per triangle use glGenLists, glNewList and GL_COMPILE for the base object
This is complicated by the fact that during execution the handlers can be modifying binary data in ARM memory.
The ARM CPU will need some hooks to allow the OpenGL code to register for interesting parts of memory and receive callbacks when certain locations are modified.
Then when these callbacks are received they can cause the ARM memory to be reparsed into the OpenGL lists.


// MPi: TODO: Produce a proper heap that can free blocks. At the moment this just increments.



// MPi: TODO: Implement proper TAG ARM internal data structures



// MPi: TODO: When the system is re-run then this needs to be copied from the loaded data
// MPi: TODO: When the world is re-run then this needs to be copied from the loaded data



// MPi: TODO: Need temp work area in R10



// MPi: TODO: The live world needs a proper linklist



// MPi: TODO: Fill in proper template live data like object and handler data



